// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id            String   @id
  name          String
  shopifyDomain String
  accessToken   String
  apiVersion    String   @default("2023-10")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customers Customer[]
  orders    Order[]
  products  Product[]

  @@map("tenants")
}

model Customer {
  id          String   @id @default(cuid())
  tenantId    String
  shopifyId   String
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  totalSpent  Float    @default(0)
  ordersCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders Order[]

  @@unique([tenantId, shopifyId])
  @@map("customers")
}

model Order {
  id          String   @id @default(cuid())
  tenantId    String
  shopifyId   String
  customerId  String?
  orderNumber String
  totalPrice  Float
  currency    String   @default("USD")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items    OrderItem[]

  @@unique([tenantId, shopifyId])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String?
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  shopifyId   String
  title       String
  handle      String?
  vendor      String?
  productType String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items  OrderItem[]

  @@unique([tenantId, shopifyId])
  @@map("products")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}